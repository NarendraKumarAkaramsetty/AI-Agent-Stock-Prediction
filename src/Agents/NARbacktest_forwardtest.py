import datetime


def backtest_strategy(llm_signals, historical_data):
    """
    Backtests trading signals generated by the LLM.
    
    Args:
        llm_signals (list): A list of buy/sell/hold signals from the LLM.
        historical_data (DataFrame): Historical stock data with 'Close' prices.
    
    Returns:
        dict: Backtesting results (profit/loss percentage).
    """
    if historical_data.empty or not llm_signals:
        return {"message": "No valid historical data or signals for backtesting."}

    initial_balance = 10000  # Starting balance in USD
    balance = initial_balance
    position = 0  # Number of stocks owned
    entry_price = 0  # Track the entry price of the stock
    
    for index, row in historical_data.iterrows():
        signal = llm_signals.get(index, "HOLD")  # Default to HOLD if no signal
        
        if signal == "BUY" and balance > 0:
            position = balance / row["Close"]  # Buy as many as possible
            balance = 0
            entry_price = row["Close"]
        
        elif signal == "SELL" and position > 0:
            balance = position * row["Close"]  # Sell all holdings
            position = 0

    final_value = balance + (position * historical_data.iloc[-1]["Close"])
    return {
        "initial_balance": initial_balance,
        "final_balance": round(final_value, 2),
        "profit_percent": round(((final_value - initial_balance) / initial_balance) * 100, 2),
    }


def forward_test_strategy(llm_signals, current_prices):
    """
    Forward tests the LLM signals using simulated real-time price data.
    
    Args:
        llm_signals (dict): Buy/sell/hold signals mapped to dates.
        current_prices (dict): Simulated future prices mapped to dates.

    Returns:
        dict: Forward testing results.
    """
    if not llm_signals or not current_prices:
        return {"message": "No valid price data or signals for forward testing."}

    balance = 10000
    position = 0
    entry_price = 0

    for date, price in current_prices.items():
        signal = llm_signals.get(date, "HOLD")

        if signal == "BUY" and balance > 0:
            position = balance / price
            balance = 0
            entry_price = price

        elif signal == "SELL" and position > 0:
            balance = position * price
            position = 0

    final_value = balance + (position * list(current_prices.values())[-1])
    return {
        "final_balance": round(final_value, 2),
        "profit_percent": round(((final_value - 10000) / 10000) * 100, 2),
    }
